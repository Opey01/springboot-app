pipeline {
  agent any
  options {
    timestamps()
    skipDefaultCheckout(true)   // stop Jenkins from auto-checkout
  }

  environment {
    // --- AWS / ECR ---
    AWS_REGION   = 'us-east-2'
    ACCOUNT_ID   = '850924742604'
    ECR_REPO     = 'mydockerrepo'
    REGISTRY     = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    IMAGE_TAG    = "build-${BUILD_NUMBER}"
    IMAGE_URI    = "${REGISTRY}/${ECR_REPO}:${IMAGE_TAG}"

    // --- Build inputs ---
    POM_PATH        = 'MyAwesomeApp/pom.xml'
    DOCKERFILE_PATH = 'Dockerfilejenkins'
    BUILD_CONTEXT   = '.'

    // AWS credentials (leave blank if EC2 has IAM role)
    AWS_CREDENTIALS_ID = ''
  }

  stages {

    stage('Prep (Clean Workspace)') {
      steps {
        deleteDir()
      }
    }

    stage('Checkout Source') {
      steps {
        git url: 'https://github.com/Opey01/springboot-app.git', branch: 'master'
      }
    }

    stage('Build with Maven') {
      steps {
        sh 'mvn -f ${POM_PATH} -B -DskipTests clean package'
      }
    }

    stage('Archive JAR Artifact') {
      steps {
        archiveArtifacts artifacts: 'MyAwesomeApp/target/*.jar', fingerprint: true
      }
    }

    stage('Docker Build & Tag') {
      steps {
        sh '''
          docker build -f ${DOCKERFILE_PATH} -t ${ECR_REPO}:${IMAGE_TAG} ${BUILD_CONTEXT}
          docker tag ${ECR_REPO}:${IMAGE_TAG} ${IMAGE_URI}
          docker tag ${ECR_REPO}:${IMAGE_TAG} ${REGISTRY}/${ECR_REPO}:latest
        '''
      }
    }

    stage('Trivy Scan (Security)') {
      steps {
        sh '''
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $WORKSPACE/.trivy-cache:/root/.cache/ \
            aquasec/trivy:latest image \
            --severity HIGH,CRITICAL \
            --no-progress \
            --exit-code 1 \
            ${IMAGE_URI}
        '''
      }
    }

    stage('Push to ECR') {
      steps {
        script {
          def pushToEcr = {
            sh '''
              aws ecr get-login-password --region "$AWS_REGION" \
                | docker login --username AWS --password-stdin "$REGISTRY"

              docker push "${IMAGE_URI}"
              docker push "${REGISTRY}/${ECR_REPO}:latest"
            '''
          }
          if (env.AWS_CREDENTIALS_ID?.trim()) {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                              credentialsId: env.AWS_CREDENTIALS_ID]]) {
              pushToEcr()
            }
          } else {
            pushToEcr()
          }
        }
      }
    }

    stage('Deploy to EKS with Helm') {
      steps {
        script {
          withKubeConfig([credentialsId: 'K8S']) {
            sh """
              helm upgrade --install springboot /home/ubuntu/springboot-chart \
                --set image.repository=${REGISTRY}/${ECR_REPO} \
                --set image.tag=build-${BUILD_NUMBER} \
                --namespace default
            """

            // Wait for rollout
            sh 'kubectl rollout status deployment/springboot-springboot-chart'

            // Show service and external URL
            sh '''
              echo "=== Services ==="
              kubectl get svc springboot-springboot-chart -o wide

              LB=$(kubectl get svc springboot-springboot-chart -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              if [ -n "$LB" ]; then
                echo "Application available at: http://$LB"
              else
                echo "LoadBalancer is still provisioning..."
              fi
            '''
          }
        }
      }
    }
  }

  post {
    always {
      sh 'docker logout ${REGISTRY} || true'
      cleanWs()
    }
  }
}




