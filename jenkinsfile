pipeline {
  agent any
  options { timestamps(); ansiColor('xterm') }

  environment {
    // === GIT ===
    GIT_URL       = 'https://github.com/Opey01/springboot-app.git' // default branch used

    // === AWS / ECR ===
    AWS_REGION    = 'us-east-2'
    ACCOUNT_ID    = '850924742604'
    ECR_REPO_NAME = 'mydockerrepo'
    REGISTRY      = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

    // === Build paths (adjust if needed) ===
    POM_PATH        = 'MyAwesomeApp/pom.xml'
    DOCKERFILE_PATH = 'Dockerfile'   // or 'MyAwesomeApp/Dockerfile'
    BUILD_CONTEXT   = '.'            // or 'MyAwesomeApp'
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        git url: env.GIT_URL
      }
    }

    stage('Prepare Tag') {
      steps {
        script {
          def sha = sh(returnStdout: true, script: 'git rev-parse --short=12 HEAD').trim()
          env.IMAGE_TAG = "${sha}-${BUILD_NUMBER}"                   // immutable
          env.IMAGE_URI = "${REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}"
          echo "IMAGE_URI = ${env.IMAGE_URI}"
        }
      }
    }

    stage('Build JAR') {
      steps {
        sh 'mvn -f "$POM_PATH" -B clean install'
      }
    }

    stage('Docker Build') {
      steps {
        sh 'docker build -t "$IMAGE_URI" -f "$DOCKERFILE_PATH" "$BUILD_CONTEXT"'
      }
    }

    stage('Trivy Security Scan') {
      steps {
        sh '''
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --severity HIGH,CRITICAL \
            --no-progress \
            --exit-code 1 \
            "$IMAGE_URI"
        '''
      }
    }

    stage('Login & Push to ECR') {
      steps {
        sh '''
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$REGISTRY"

          docker push "$IMAGE_URI"
        '''
      }
    }
  }

  post {
    always {
      sh 'docker logout "$REGISTRY" || true'
      archiveArtifacts artifacts: 'MyAwesomeApp/target/*.jar', fingerprint: true, onlyIfSuccessful: false
    }
  }
}


